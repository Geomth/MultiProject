
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
            - name: Upload a Build Artifact
  uses: actions/upload-artifact@v4.4.3
  with:
    # Artifact name
    name: # optional, default is artifact
    # A file, directory or wildcard pattern that describes what to upload
    path: 
    # The desired behavior if no files are found using the provided path.
Available Options:
  warn: Output a warning but do not fail the action
  error: Fail the action with an error message
  ignore: Do not output any warnings or errors, the action does not fail

    if-no-files-found: # optional, default is warn
    # Duration after which artifact will expire in days. 0 means using default retention.
Minimum 1 day. Maximum 90 days unless changed from the repository settings page.

    retention-days: # optional
    # The level of compression for Zlib to be applied to the artifact archive. The value can range from 0 to 9: - 0: No compression - 1: Best speed - 6: Default compression (same as GNU Gzip) - 9: Best compression Higher levels will result in better compression, but will take longer to complete. For large files that are not easily compressed, a value of 0 is recommended for significantly faster uploads.

    compression-level: # optional, default is 6
    # If true, an artifact with a matching name will be deleted before a new one is uploaded. If false, the action will fail if an artifact for the given name already exists. Does not fail if the artifact does not exist.

    overwrite: # optional, default is false
    # If true, hidden files will be included in the artifact. If false, hidden files will be excluded from the artifact.

    include-hidden-files: # optional, default is false
          
contract NellsCarpoolContract {
    address public borrower;
    address public lender;
    uint256 public loanAmount;
    string public currency;
    uint256 public ownershipPercentage;
    string public purposeDescription;
    string public loanRepaymentCommitment;

    struct Purpose {
        string description;
        string details;
    }

    Purpose[] public purposes;

    constructor() {
        borrower = 0xAf227Cf67c13B54246B5220608fee8ee000Dbe53; // Cory K Washington
        lender = 0xA700b4eB416Be35b2911fd5Dee80678ff64fF6C9; // Updated lender address
        loanAmount = 1500000000000; // Amount in USD (1.5 trillion)
        currency = "USD";
        ownershipPercentage = 100; // Percentage of ownership
        purposeDescription = "Expand globally and build from certification with states.";

        // Adding purposes
        purposes.push(Purpose("Expand globally", "Use funds to establish operations in new markets."));
        purposes.push(Purpose("Build certification with states", "Ensure compliance and certification in target markets."));
        purposes.push(Purpose("Contractor payments", "Funds for contractors working on expansion projects."));
        purposes.push(Purpose("Payroll", "Allocate funds for employee salaries during expansion."));
        purposes.push(Purpose("Working capital", "Maintain liquidity for operational needs during growth."));
        
        loanRepaymentCommitment = "Loans will be paid back in a timely manner for the amount specified.";
    }

    // Function to get loan details
    function getLoanDetails() public view returns (address, address, uint256, string memory, string memory) {
        return (borrower, lender, loanAmount, currency, loanRepaymentCommitment);
    }

    // Function to get purposes
    function getPurposes() public view returns (Purpose[] memory) {
        return purposes;
    }

    // Commitment function
    function commitToIntegrity() public view returns (string memory) {
        return "Always act with integrity and care for community interests.";
    }
}
